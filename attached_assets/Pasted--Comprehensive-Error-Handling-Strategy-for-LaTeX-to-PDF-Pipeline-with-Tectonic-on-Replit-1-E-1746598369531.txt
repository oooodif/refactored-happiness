# # Comprehensive Error-Handling Strategy for LaTeX-to-PDF Pipeline with Tectonic on Replit

## 1. Error Detection System

### Common Failure Patterns and Detection

| Error Type | Detection Pattern | Root Cause |
|------------|------------------|------------|
| **TikZ Loop Issues** | `Argument of \pgffor@next has an extra }` | Unbalanced braces in foreach loops |
| | `Package tikz Error: A node must have a (possibly empty) label text` | Empty node labels |
| **Missing Fonts** | `Font XX not loadable: Metric (TFM) file not found` | Font unavailable in Tectonic |
| **Package Errors** | `! LaTeX Error: File 'package.sty' not found` | Package unavailable or network issues |
| **Longtable Problems** | `! Misplaced \noalign` | Malformed table structure |
| | `! Extra alignment tab has been changed to \cr` | Too many columns |
| **Structure Errors** | `! Too many }'s` | Unbalanced braces |
| | `! LaTeX Error: \begin{...} ended by \end{...}` | Mismatched environments |

```javascript
// Error detector implementation
class ErrorDetector {
detectErrors(logOutput) {
const errors = [];

// Check for TikZ errors
if (logOutput.match(/Argument of \\pgffor@next has an extra \}/)) {
errors.push({type: 'tikz_loop', message: 'Unbalanced braces in TikZ foreach loop'});
}
if (logOutput.match(/Package tikz Error: A node must have a \(possibly empty\) label text/)) {
errors.push({type: 'tikz_node', message: 'Empty node label in TikZ diagram'});
}

// Check for package errors, font issues, etc.
// ...

return errors;
}
}
```

## 2. Automated Correction System

### TikZ Loop and Node Fixes

```javascript
function fixTikZNodeIssues(latex) {
// Fix empty node labels by adding phantom content
const fixedLatex = latex.replace(
/\\node\[(.*?)\](\s*);/g, 
'\\node[$1]{\\phantom{X}};'
);

// Balance braces in foreach loops
return balanceBracesInTikZLoops(fixedLatex);
}

function balanceBracesInTikZLoops(latex) {
// Complex brace-balancing algorithm for \foreach blocks
// Uses a stack to track opening/closing braces and repair mismatches
// ...
}
```

### Longtable Repairs

```javascript
function fixLongtables(latex) {
// Find tables that might be too wide
const tablePattern = /\\begin{longtable}{([^}]+)}/g;

return latex.replace(tablePattern, (match, columnSpec) => {
// Count columns
const columnCount = (columnSpec.match(/[lcr|]/g) || []).length;

if (columnCount > 5) {
// Split into multiple tables by columns
return generateMultipleTablesByColumn(match, columnSpec);
} else {
// Ensure wrapping p{} columns for text
return addWrappingToColumns(match, columnSpec);
}
});
}
```

### Package Substitution

```javascript
function handleMissingPackages(latex, missingPackages) {
const substitutions = {
'fontspec': '\\usepackage[T1]{fontenc}\\usepackage{lmodern}',
'tikz-cd': '\\usepackage{tikz}\\usetikzlibrary{matrix,arrows}',
// Other common substitutions
};

let modified = latex;
missingPackages.forEach(pkg => {
if (substitutions[pkg]) {
// Replace with alternative
modified = modified.replace(
new RegExp(`\\\\usepackage(\\[.*?\\])?{${pkg}}`, 'g'),
substitutions[pkg]
);
} else {
// Comment out if no alternative
modified = modified.replace(
new RegExp(`\\\\usepackage(\\[.*?\\])?{${pkg}}`, 'g'),
`% Package ${pkg} not available in Replit environment: $&`
);
}
});

return modified;
}
```

## 3. Fallback Behavior

```javascript
class LatexCompiler {
async compileToPDF(latex) {
// First attempt: standard compilation
try {
return await this.runTectonic(latex);
} catch (error) {
// Detect error types
const errors = this.errorDetector.detectErrors(error.log);

// Apply fixes based on error type
const fixedLatex = await this.applyFixes(latex, errors);

// Second attempt with fixes
try {
return await this.runTectonic(fixedLatex);
} catch (secondError) {
// If still failing, try more aggressive approach
return await this.fallbackCompilation(latex, errors);
}
}
}

async fallbackCompilation(latex, errors) {
// Try progressively more aggressive approaches

// 1. Strip problematic elements
const simplified = this.stripProblematicElements(latex);
try {
return await this.runTectonic(simplified);
} catch (e) {
// Continue to next approach
}

// 2. Use minimal template with content only
const minimal = this.createMinimalLatex(latex);
try {
return await this.runTectonic(minimal);
} catch (e) {
// Continue to next approach
}

// 3. AI-based repair (last correction attempt)
try {
const aiFixed = await this.useAIToFix(latex, errors);
return await this.runTectonic(aiFixed);
} catch (e) {
// Final fallback - generate PDF directly
return this.generateErrorPDF(latex, errors);
}
}
}
```

## 4. PDF Integrity Verification

```javascript
async function verifyPDFIntegrity(pdfBuffer) {
try {
// Check PDF header
if (!pdfBuffer.toString('ascii', 0, 5).match(/%PDF-/)) {
return { valid: false, reason: 'Invalid PDF header' };
}

// Use pdf.js to parse the document structure
const pdf = await pdfjsLib.getDocument({data: pdfBuffer}).promise;

// Verify page count
if (pdf.numPages === 0) {
return { valid: false, reason: 'PDF has no pages' };
}

// Check text content
const page = await pdf.getPage(1);
const textContent = await page.getTextContent();

if (textContent.items.length === 0) {
return { valid: false, reason: 'PDF contains no text content' };
}

return { valid: true };
} catch (error) {
return { valid: false, reason: `PDF integrity check failed: ${error.message}` };
}
}
```

## 5. Font Handling Strategy

```javascript
function setupTectonicFonts() {
// Create a directory for custom fonts
const fontDir = '/tmp/tectonic-fonts';
fs.mkdirSync(fontDir, { recursive: true });

// Install core fonts if missing
const coreFonts = ['lmodern', 'cm-super', 'latin-modern'];
for (const font of coreFonts) {
if (!fs.existsSync(`${fontDir}/${font}`)) {
// Download and extract font package
// ...
}
}

// Create font substitution file
const substitutions = `
% Font substitution map for Tectonic on Replit
\\renewcommand{\\rmdefault}{lmr}
\\renewcommand{\\sfdefault}{lmss}
\\renewcommand{\\ttdefault}{lmtt}

% Common substitutions
\\DeclareFontShape{T1}{lmr}{b}{n}{<->ssub * lmr/bx/n}{}
\\DeclareFontShape{T1}{lmr}{m}{it}{<->ssub * lmr/m/it}{}
`;

fs.writeFileSync(`${fontDir}/font-substitutions.tex`, substitutions);

return `\\input{${fontDir}/font-substitutions.tex}`;
}

function preprocessLatexForFonts(latex) {
const fontSubstitutions = setupTectonicFonts();

// Add font substitutions after documentclass
let modified = latex.replace(
/(\\documentclass.*?\})/,
`$1\n\\usepackage[T1]{fontenc}\n${fontSubstitutions}`
);

// Replace problematic font commands
modified = modified.replace(
/\\setmainfont{(.*?)}/g,
'\\renewcommand{\\rmdefault}{lmr} % Replaced \\setmainfont{$1}'
);

return modified;
}
```

## 6. Error Message Formatting

```javascript
function formatErrorsForUser(errors) {
const messages = [];

const errorTypeLabels = {
'tikz_loop': 'Diagram Loop Issue',
'tikz_node': 'Diagram Node Issue',
'package': 'Package Not Available',
'font': 'Font Not Available',
'table': 'Table Formatting Issue',
'math': 'Math Expression Issue',
'structure': 'Document Structure Issue'
};

for (const error of errors) {
const label = errorTypeLabels[error.type] || 'LaTeX Error';

let message = {
title: label,
description: error.message,
technical: error.log,
actions: []
};

// Add specific actions based on error type
if (error.type === 'tikz_loop' || error.type === 'tikz_node') {
message.actions.push({
label: 'Simplify Diagram',
action: 'simplify_tikz'
});
}

if (error.type === 'table') {
message.actions.push({
label: 'Auto-split Table',
action: 'split_table'
});
}

messages.push(message);
}

return messages;
}
```

## 7. Final Fallback: Guaranteed PDF Generation

```javascript
async function generateErrorPDF(latex, errors) {
// When all else fails, create a PDF directly
// without going through LaTeX/Tectonic

// Use a library like pdfkit
const PDFDocument = require('pdfkit');
const doc = new PDFDocument();

// Collect chunks
const chunks = [];
doc.on('data', chunk => chunks.push(chunk));

// Add content
doc.fontSize(24).text('LaTeX Compilation Report', {
align: 'center'
});

doc.moveDown();
doc.fontSize(12).text(
'Your LaTeX document could not be compiled. ' +
'Here is a report of the issues found:'
);

doc.moveDown();
for (const error of errors) {
doc.fontSize(14).text(error.type, {
underline: true
});
doc.fontSize(10).text(error.message);
doc.moveDown(0.5);
}

doc.moveDown();
doc.fontSize(12).text('Your Original LaTeX Code:');
doc.moveDown(0.5);

// Add the LaTeX code with syntax formatting
doc.font('Courier').fontSize(8).text(latex, {
width: 500,
align: 'left'
});

// End the document
doc.end();

return new Promise(resolve => {
doc.on('end', () => {
resolve(Buffer.concat(chunks));
});
});
}
```

## 8. Complete Pipeline Implementation

```javascript
class TectonicPDFGenerator {
constructor() {
this.errorDetector = new ErrorDetector();
this.maxRetries = 3;
}

async generatePDF(latexCode) {
// Preprocess the LaTeX code
let currentLatex = preprocessLatexForFonts(latexCode);

// Add standard packages if missing
currentLatex = this.ensureRequiredPackages(currentLatex);

let result = null;
let attempts = 0;

while (attempts < this.maxRetries && !result) {
attempts++;

try {
// Try to compile
const { stdout, stderr, pdfBuffer } = await this.runTectonic(currentLatex);

// Check for errors
const errors = this.errorDetector.detectErrors(stderr);

if (errors.length === 0 && pdfBuffer) {
// Verify PDF integrity
const integrity = await verifyPDFIntegrity(pdfBuffer);

if (integrity.valid) {
// Success!
result = {
success: true,
pdf: pdfBuffer,
warnings: []
};
} else {
throw new Error(`PDF integrity check failed: ${integrity.reason}`);
}
} else {
// Apply fixes for next attempt
currentLatex = await this.applyFixes(currentLatex, errors);
}
} catch (error) {
// Handle compilation error
if (attempts < this.maxRetries) {
// Try to recover
const errors = this.errorDetector.detectErrors(error.message);
currentLatex = await this.applyFixes(currentLatex, errors);
} else {
// Final attempt failed
const errors = this.errorDetector.detectErrors(error.message);
const errorMessages = formatErrorsForUser(errors);

// Generate fallback PDF directly
const fallbackPDF = await generateErrorPDF(latexCode, errors);

result = {
success: false,
pdf: fallbackPDF,
errors: errorMessages
};
}
}
}

return result;
}

async runTectonic(latexCode) {
// Save to temporary file
const tempDir = '/tmp/tectonic-run';
fs.mkdirSync(tempDir, { recursive: true });

const texPath = `${tempDir}/document.tex`;
fs.writeFileSync(texPath, latexCode);

try {
// Set resource limits for Replit environment
const maxMemory = process.env.REPLIT_MEMORY || '1500M';

// Run tectonic with appropriate options
const { stdout, stderr } = await execPromise(
`ulimit -v $(numfmt --from=iec ${maxMemory}) && ` +
`tectonic --outdir ${tempDir} --keep-logs --reruns 3 ${texPath}`
);

// Check if PDF was generated
const pdfPath = `${tempDir}/document.pdf`;
if (fs.existsSync(pdfPath)) {
const pdfBuffer = fs.readFileSync(pdfPath);
return { stdout, stderr, pdfBuffer };
} else {
throw new Error(`Tectonic did not generate a PDF: ${stderr}`);
}
} catch (error) {
// Handle execution error
throw new Error(`Tectonic failed: ${error.message}`);
}
}

async applyFixes(latexCode, errors) {
let modified = latexCode;

for (const error of errors) {
if (error.type === 'tikz_node' || error.type === 'tikz_loop') {
modified = fixTikZNodeIssues(modified);
} else if (error.type === 'package') {
modified = handleMissingPackages(modified, [error.packageName]);
} else if (error.type === 'table') {
modified = fixLongtables(modified);
} else if (error.type === 'structure') {
modified = balanceBraces(modified);
}
// Handle other error types...
}

// If automated fixes don't work, try AI-powered repair
if (errors.length > 2 && this.useAI) {
try {
return await this.useAIToFix(latexCode, errors);
} catch (e) {
// Fall back to our best attempt
return modified;
}
}

return modified;
}

async useAIToFix(latexCode, errors) {
// Use OpenAI to fix LaTeX issues
const errorDescriptions = errors.map(e => e.message).join('\n');

const systemPrompt = `
You are a LaTeX repair specialist. Fix the following LaTeX code that has these errors:
${errorDescriptions}

Return ONLY the fixed LaTeX code, with no explanations or markdown formatting.
Ensure your fix:
1. Balances all braces
2. Fixes any TikZ node or loop issues
3. Replaces unavailable packages with alternatives
4. Simplifies complex structures that might cause compilation issues
`;

const response = await callOpenAI(systemPrompt, latexCode);
return response.trim();
}

ensureRequiredPackages(latexCode) {
// Make sure common packages are included
const requiredPackages = [
{ name: 'geometry', options: 'margin=1in' },
{ name: 'fontenc', options: 'T1' },
{ name: 'inputenc', options: 'utf8' }
];

let modified = latexCode;

// Check for documentclass
if (!modified.includes('\\documentclass')) {
modified = '\\documentclass{article}\n' + modified;
}

// Add missing packages
for (const pkg of requiredPackages) {
const packagePattern = new RegExp(`\\\\usepackage(\\[.*?\\])?{${pkg.name}}`);

if (!packagePattern.test(modified)) {
const packageLine = pkg.options
? `\\usepackage[${pkg.options}]{${pkg.name}}`
: `\\usepackage{${pkg.name}}`;

modified = modified.replace(
/(\\documentclass.*?\})/,
`$1\n${packageLine}`
);
}
}

// Ensure document environment exists
if (!modified.includes('\\begin{document}')) {
modified += '\n\\begin{document}\n\\end{document}';
}

return modified;
}
}
```

## 9. Final Handler with AI Fallback Guarantee

The ultimate guarantor of PDF generation is a multi-tier approach that ensures users always get a PDF:

```javascript
async function handleLatexToPDF(latexCode) {
const tectonicGenerator = new TectonicPDFGenerator();

try {
// First attempt: Standard Tectonic pipeline
const result = await tectonicGenerator.generatePDF(latexCode);

if (result.success) {
return result;
}

// Second attempt: AI-powered repair
tectonicGenerator.useAI = true;
const aiResult = await tectonicGenerator.generatePDF(latexCode);

if (aiResult.success) {
return {
...aiResult,
warnings: [
{ type: 'ai_repair', message: 'Your document was fixed using AI assistance.' },
...aiResult.warnings
]
};
}

// Final fallback: Direct PDF generation with error report
const errorPDF = await generateErrorPDF(latexCode, result.errors);

return {
success: false,
pdf: errorPDF,
errors: result.errors,
message: 'We couldn\'t compile your LaTeX document, but created a report with the issues found.'
};
} catch (error) {
// Absolute last resort - guaranteed PDF
return {
success: false,
pdf: await generateSimplePDF(
'LaTeX Processing Error',
`We encountered an unexpected error: ${error.message}`,
latexCode
),
errors: [{ type: 'system', message: error.message }]
};
}
}
```

This comprehensive strategy ensures that:
1. Well-formed LaTeX compiles normally through Tectonic
2. Common errors are automatically detected and fixed
3. Complex errors are repaired with AI assistance
4. Even if all compilation attempts fail, users receive a PDF explaining the issues
5. The system never fails to produce a PDF, regardless of input or environment conditions

Implemented properly, this approach will make your LaTeX processing pipeline robust enough to handle virtually any input while providing helpful, user-friendly feedback when problems occur.
