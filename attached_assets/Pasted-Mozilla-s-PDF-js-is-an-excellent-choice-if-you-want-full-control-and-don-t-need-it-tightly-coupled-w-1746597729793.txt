Mozillaâ€™s PDF.js is an excellent choice if you want full control and donâ€™t need it tightly coupled with React. Itâ€™s the underlying engine behind most React wrappers like react-pdf, but using it directly gives you:
	â€¢	Fewer headaches with workers.
	â€¢	A complete standalone viewer (already built).
	â€¢	A browser-native feel without extra React abstraction.

â¸»

âœ… 2 Ways to Use PDF.js by Mozilla

â¸»

ðŸ”¹ Option 1: Use Mozillaâ€™s Prebuilt Viewer (Recommended)

This is the easiest and most stable way.

Steps:
	1.	Download the viewer:
	â€¢	Clone the repo or download from GitHub:

git clone https://github.com/mozilla/pdf.js.git
cd pdf.js
npm install
npm run bundle


	2.	Copy web/viewer.html and the build folder into your projectâ€™s public/ directory.
	3.	Embed it:

<iframe
  src="/pdfjs/web/viewer.html?file=/your-pdf-path/sample.pdf"
  width="100%"
  height="700px"
  style="border: none;"
></iframe>

This uses Mozillaâ€™s full-featured viewer â€” search, thumbnails, zoom, download, print â€” out of the box.

Pros:
	â€¢	No React integration or worker issues.
	â€¢	Full PDF functionality.
	â€¢	Customizable via HTML/CSS.

â¸»

ðŸ”¹ Option 2: Use PDF.js Programmatically (Custom Integration)

For more control over rendering, but more setup.

Steps:
	1.	Install PDF.js:

npm install pdfjs-dist

	2.	Basic usage (in a React useEffect):

import * as pdfjsLib from 'pdfjs-dist';
import 'pdfjs-dist/web/pdf_viewer.css';

pdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;

useEffect(() => {
  const container = document.getElementById('pdf-container');

  const loadPDF = async () => {
    const loadingTask = pdfjsLib.getDocument('/your-pdf.pdf');
    const pdf = await loadingTask.promise;
    const page = await pdf.getPage(1);

    const viewport = page.getViewport({ scale: 1.5 });
    const canvas = document.createElement('canvas');
    const context = canvas.getContext('2d');
    canvas.height = viewport.height;
    canvas.width = viewport.width;

    container.appendChild(canvas);

    await page.render({
      canvasContext: context,
      viewport: viewport,
    }).promise;
  };

  loadPDF();
}, []);

	3.	Add this in your JSX:

<div id="pdf-container"></div>



â¸»

ðŸŸ¢ Summary

Use Case	Method	Effort	Features	Best For
Full viewer, zero setup	viewer.html in iframe	Low	Full	Standalone PDFs, all features
Full control, custom display	pdfjs-dist programmatic API	Medium	Custom	Render inside custom UI or logic



â¸»

Would you like a zip file or boilerplate with viewer.html already set up for deployment?