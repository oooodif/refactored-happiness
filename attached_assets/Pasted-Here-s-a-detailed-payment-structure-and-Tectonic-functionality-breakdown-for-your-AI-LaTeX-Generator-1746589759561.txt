Here’s a detailed payment structure and Tectonic functionality breakdown for your AI LaTeX Generator app, including how usage ties into cost and feature gating:

⸻

Payment Structure

Free Tier (Default)
	•	Monthly Requests: 3 LaTeX-to-PDF generations
	•	Access: Full app UI, preview mode, basic AI output
	•	PDF Export: Watermarked or limited
	•	Features Available:
	•	AI-powered LaTeX generation
	•	View raw LaTeX code
	•	View compiled preview (low-res or embedded only)
	•	Usage tracker / prompt to upgrade

Purpose: Encourage conversion through limited value without giving away high-cost compute.

⸻

Paid Tiers (Managed via RevenueCat)

Plan	Monthly Price	AI Generations	Tectonic Compiles	Extras
Basic	$4.99	50	50	Remove watermark, high-res PDF, saved history
Pro	$9.99	250	250	Table splitting, Beamer mode, TikZ preview
Power	$19.99	1,000+	1,000+	Priority AI queue, advanced templates, live math editing

Revenue Split: Apple takes 30% → You net:
	•	$3.49 per Basic user
	•	$6.99 per Pro user
	•	$13.99 per Power user

Estimated Cost per 1000 users/month (OpenAI + Tectonic compute):
Assuming 3% convert and use full quota:
	•	AI + Tectonic usage per 1,000 MAUs: ~$7–15 max
	•	Monthly profit at 3% conversion: $1,000–$10,000+ net depending on tier mix

⸻

Tectonic Functionality Breakdown

What Tectonic Does:

Tectonic compiles .tex into .pdf with no need for a local TeX install or external packages. It pulls packages on demand and builds in a sandboxed environment.

⸻

Integration Options:

Option 1: Server-Side Tectonic (Initial Approach – Recommended for V1)
	•	Runs on: Node.js backend (e.g. Vercel, Render, or dedicated VPS)
	•	Workflow:
	1.	User submits input text or LaTeX code
	2.	AI returns cleaned .tex file
	3.	Backend compiles with Tectonic CLI (tectonic input.tex)
	4.	Resulting .pdf streamed back to iOS app
	•	Benefits:
	•	Fast to deploy
	•	Easy to log errors, patch TikZ issues, and scale backend
	•	Easier for rate limiting and per-user quota enforcement
	•	Cost Estimate: $0.01–$0.05 per compilation (compute + storage)

⸻

Option 2: Local Tectonic Compilation (Planned for V2)
	•	Runs directly on device via embedded binary (cross-compiled for iOS using Rust/Xcode)
	•	Benefits:
	•	Offline support
	•	No server cost
	•	Real-time feedback and preview
	•	Challenges:
	•	Difficult to cross-compile and embed
	•	Increases app bundle size
	•	Harder to patch/maintain dynamically

⸻

Failure Handling:

If compilation fails:
	•	Return AI-generated fix suggestion
	•	Option to “retry with corrections”
	•	Fallback: Ask user for clarification or reformat into safe PDF template

⸻

Example API Flow (Server-Side):

POST /generate-latex
{
  "input": "User's content...",
  "options": {
    "mode": "beamer",
    "format": "article",
    "splitTables": true
  }
}
→
AI generates .tex → Backend runs Tectonic → Returns compiled .pdf



⸻

Would you like a PDF or diagram version of this breakdown? Or a version for investors or the App Store listing?